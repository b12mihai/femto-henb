#ifndef _L1_MSG_ALLOC_H_
#define _L1_MSG_ALLOC_H_


/** 
 * Generic FAPI message allocator
 * 
 * @param type - Message Type
 * @param msg  - out message
 * @param size - message size
 * 
 * @return 0- OK, ENOMEM - prombels
 */
int l1_msg_alloc_generic(FAPI_L1_MessageTypeID_e type,
                         fapi_l1_msg_hdr_t * msg, size_t size);

/** 
 * Generic FAPI message deallocator
 * 
 * @param msg - message to set free
 * 
 * @return OK if 0
 */
// int l1_msg_free_generic(fapi_l1_msg_hdr_t *msg);


/** 
 * Message deallocator with extra checks
 * 
 * @param type - Message Typy
 * @param msg  - message to set free
 */
void l1_msg_free(FAPI_L1_MessageTypeID_e type, fapi_l1_msg_hdr_t *msg);

/** 
 * Allocate fapi_l1_config_request, fill up TLV's
 * 
 * @param request  - request
 * @param tlvs     - content 
 * @param numberOfTLVs - content size
 * 
 * @return error status, OK if 0 
 */
int l1_alloc_config_request (struct fapi_l1_config_request* request,
                             l1_tlv_word_t tlvs[], uint8_t numberOfTLVs);

/** 
 * Allocate fapi_l1_config_response, fill up TLV errors
 * 
 * @param errorCode   - see 3.4  Error Codes
 * @param response    - response
 * @param request     - initial request
 * @param tlv_errors  - array, indexed by TLV tags
 * 
 * @return error status, OK if 0 
 */
int l1_alloc_config_response (FAPI_L1_ErrorCodes_e errorCode,
                              struct fapi_l1_config_response* response,
                              struct fapi_l1_config_request* request,
                              uint8_t *tlv_errors);

/** 
 * Allocate fapi_l1_param_request
 * 
 * @param request - param request
 * 
 * @return error status, OK if 0 
 */
int l1_alloc_param_request (struct fapi_l1_param_request* request);

/** 
 * Allocate fapi_l1_param_response
 * 
 * @param request - param request
 * 
 * @return error status, OK if 0 
 */
int l1_alloc_param_response (FAPI_L1_ErrorCodes_e errorCode,
                             struct fapi_l1_param_response* request,
                             uint8_t numberOfTLVs);

/** 
 * Allocate fapi_l1_start_request
 * 
 * @param request - request
 * 
 * @return error status, OK if 0 
 */
int l1_alloc_start_request (struct fapi_l1_start_request* request);

/** 
 * Allocate fapi_l1_stop_request
 * 
 * @param request - request
 * 
 * @return error status, OK if 0 
 */
int l1_alloc_stop_request (struct fapi_l1_stop_request* request);

/** 
 * Allocate fapi_l1_error_indication
 * 
 * @param errorCode  - error code
 * @param messageID  - generated by message
 * @param indication - indication
 * 
 * @return 
 */
int l1_alloc_error_indication (FAPI_L1_ErrorCodes_e errorCode,
                               FAPI_L1_MessageTypeID_e messageID,
                               struct fapi_l1_error_indication* indication);

/** 
 * Allocate fapi_l1_stop_indication
 * 
 * @param indication - indication
 * 
 * @return 
 */
int l1_alloc_stop_indication (struct fapi_l1_stop_indication* indication);

/** 
 * Allocate fapi_l1_ue_config_request, fill up TLV's
 * 
 * @param request  - request
 * @param tlvs     - content 
 * @param numberOfTLVs - content size
 * 
 * @return error status, OK if 0 
 */
int l1_alloc_ue_config_request (struct fapi_l1_ue_config_request* request,
                                 l1_tlv_word_t tlvs[], uint8_t numberOfTLVs);

/** 
 * Allocate fapi_l1_ue_config_response, fill up TLV errors
 * 
 * @param errorCode   - see 3.4  Error Codes
 * @param response    - response
 * @param request     - initial request
 * @param tlv_errors  - array, indexed by TLV tags
 * 
 * @return error status, OK if 0 
 */
int l1_alloc_ue_config_response (FAPI_L1_ErrorCodes_e errorCode,
                                 struct fapi_l1_ue_config_response* response,
                                 struct fapi_l1_ue_config_request* request,
                                 uint8_t *tlv_errors);

/** 
 * Allocate fapi_l1_ue_release_request, fill up TLV's
 * 
 * @param request  - request
 * @param tlvs     - content 
 * @param numberOfTLVs - content size
 * 
 * @return error status, OK if 0 
 */
int l1_alloc_ue_release_request (struct fapi_l1_ue_release_request* request,
                                 l1_tlv_word_t tlvs[], uint8_t numberOfTLVs);

/** 
 * Allocate fapi_l1_ue_release_response, fill up TLV errors
 * 
 * @param errorCode   - see 3.4  Error Codes
 * @param response    - response
 * @param request     - initial request
 * @param tlv_errors  - array, indexed by TLV tags
 * 
 * @return error status, OK if 0 
 */
int l1_alloc_ue_release_response (FAPI_L1_ErrorCodes_e errorCode,
                                 struct fapi_l1_ue_release_response* response,
                                 struct fapi_l1_ue_release_request* request,
                                 uint8_t *tlv_errors);

/** 
 * Allocate fapi_l1_subframe_indication, fill up TLV's
 * 
 * @param sfn_sf      - A 16-bit value where, [15:4] SFN, range 0  1023; [3:0] SF
 * @param indication  - message
 * 
 * @return error status, OK if 0 
 */
int l1_alloc_subframe_indication (uint16_t sfn_sf,
                                  struct fapi_l1_subframe_indication* indication);

#endif /* _L1_MSG_ALLOC_H_ */
