
target_alias = @target_alias@
target_cpu = @target_cpu@
prefix = @prefix@

KERNEL_ROOT=@kbuilddir@
TARGETDIR=$(prefix)/firmware

EMBUNIT_DIR := @embunit_dir@
EMBUNIT_SRC := embunit/embUnit

ifneq ($(KERNELRELEASE),)

ifdef V
    KBUILD_VERBOSE = $(V)
endif


EXTRA_CFLAGS += -I$(src)/../modules -I$(EMBUNIT_DIR)
EXTRA_CFLAGS += -DNO_STDIO_PRINTF


obj-m += test.o

#test runner
test-y := test_runner.o

#timer module
test-y += sys/timerTest.o
test-y += mod/tti_timerTest.o

#counter module
test-y += zero/counter.o
test-y += zero/counterTest.o

#person module
test-y += zero/person.o
test-y += zero/personTest.o

#embunit
test-y += $(EMBUNIT_SRC)/AssertImpl.o
test-y += $(EMBUNIT_SRC)/RepeatedTest.o
test-y += $(EMBUNIT_SRC)/stdImpl.o
test-y += $(EMBUNIT_SRC)/TestCaller.o
test-y += $(EMBUNIT_SRC)/TestCase.o
test-y += $(EMBUNIT_SRC)/TestResult.o
test-y += $(EMBUNIT_SRC)/TestRunner.o
test-y += $(EMBUNIT_SRC)/TestSuite.o

else # ! KERNELRELEASE

all: testing

testing:
	echo "Making $@ in `pwd`"
	@ln -sf $(EMBUNIT_DIR)
	ARCH=$(target_cpu) CROSS_COMPILE="$(target_alias)-" \
	$(MAKE) V=1 -C $(KERNEL_ROOT) M=`pwd` modules

clean:
	echo "Making $@ in `pwd`"
	ARCH=$(target_cpu) CROSS_COMPILE="$(target_alias)-" \
	$(MAKE) V=1 -C $(KERNEL_ROOT) M=`pwd` clean

install:
	echo "Making $@ in `pwd`"
	ARCH=$(target_cpu) CROSS_COMPILE="$(target_alias)-" \
	$(MAKE) V=99 -C $(KERNEL_ROOT) M=`pwd` INSTALL_MOD_PATH=$(TARGETDIR) modules_install 

embunit:
	echo "Making $@ in `pwd`"
	@ln -sf $(EMBUNIT_DIR)
	$(MAKE) -C $(EMBUNIT_DIR)/tools

################################################################################
# Run QEMU testing using buildroot
# FIXME: add --with-buildroot=DIR
################################################################################

export REPOS="/udir/vlad/repos/net/"

qemu-stop:
	killall qemu-system-arm

qemu-debug:
	screen -t qemu-debug -L -d -m './qemu.run -s -S'

# screen -t qemu -L -d -m ./qemu.run
qemu-start:
	screen -X -p qemu stuff "root"
	ssh root@192.168.0.2 'mount -t debugfs none /sys/kernel/debug/'

MODULES = lte_enb.ko 
#lte_sched.ko timerunit.ko
TEST='t'
qemu-test: testing
	-ssh root@192.168.0.2 "mount -t debugfs none /sys/kernel/debug"
	-ssh root@192.168.0.2 "mount -o remount,rw /" 
	-ssh root@192.168.0.2 "rmmod ${MODULES}"
	grep -v add-symbol-file .gdbinit > .gdbinit.new
	@list='$(MODULES)'; 								\
	for m in $$list; do 								\
		echo "copy $$m"; scp "../modules/$$m"  root@192.168.0.2:/root; 	\
		echo "insmod /root/$$m"; ssh root@192.168.0.2 "insmod /root/$$m";		\
		echo -n "add-symbol-file $$m " >> .gdbinit.new; \
		mm="`echo $$m | cut -d'.' -f1`";					\
		ssh root@192.168.0.2 "cat /sys/module/$${mm}/sections/.text" >> .gdbinit.new || true; \
	done
	@mv .gdbinit.new .gdbinit
	-ssh root@192.168.0.2 "rmmod test.ko"
	scp test.ko root@192.168.0.2:/root
	ssh root@192.168.0.2 "insmod /root/test.ko"
	screen -X -p qemu stuff "echo ${TEST} > /sys/kernel/debug/embunit/run"



#	echo -n " -s .data " >> 1; ssh root@192.168.0.2 cat /sys/module/timerunit/sections/.bss >> 1

endif # ! KERNELRELEASE